#!/bin/bash

# This script will:
# * give the environment to the `postgres` process
# * configure the extensions and external services for postgres
#
# It's a wrapper around the docker entrypoint
# https://github.com/docker-library/postgres/blob/d08757ccb56ee047efd76c41dbc148e2e2c4f68f/16/bookworm/docker-entrypoint.sh#L161
#

# Env
# .bashrc to bring an environment as if it was in the shell
. /root/.bashrc

# Pg Cron Conf
if [ -n "$PG_CRON_DB" ]; then
  if [ "$PG_CRON_DB" != "$POSTGRES_DB" ]; then
    echo "The pg cron env (PG_CRON_DB) should have the value ($POSTGRES_DB), not the value ($PG_CRON_DB)"
    echo "Sorry, we don't support multi-database yet."
    exit 1;
  fi;
  echo "PG Cron enabled on the database $PG_CRON_DB. Setting the default database name"
  sed -i "s/cron\.database_name = '.*'/cron\.database_name = '$PG_CRON_DB'/" /etc/postgresql/postgresql.conf
else
  echo "PG_CRON_DB env not found. PG Cron not enabled"
fi;

# Recovery mode via WAL
# https://www.postgresql.org/docs/current/continuous-archiving.html
RECOVERY_SIGNAL_PATH=$PGDATA/recovery.signal
if [ -f "$RECOVERY_SIGNAL_PATH" ]; then
    echo "Recovering file signal found ($RECOVERY_SIGNAL_PATH)"
    echo "Deleting the actual pgdata directory"
    rm -rf "${PGDATA:?}"/* || exit 1
    echo "Fetching the latest backup"
    wal-g backup-fetch "$PGDATA" LATEST || exit 1
    echo "Recreating the recovery signal file"
    touch "$RECOVERY_SIGNAL_PATH" || exit 1
else
    echo "No Recovering file signal found ($RECOVERY_SIGNAL_PATH)"
fi

## Restic
## Only if the repo is set
if [[ -n ${RESTIC_REPOSITORY} ]]; then
    if [[ -n ${RESTIC_PASSWORD+x} ]]; then
      if  ! restic snapshots > /dev/null; then
              echo "Restic Repo not found - Restic init at ${RESTIC_REPOSITORY}"
              restic init
              echo "Done at ${RESTIC_REPOSITORY}"
      else
        echo "RESTIC Repo already configured";
      fi
    else
      echo "RESTIC_PASSWORD is not set";
      exit 1;
    fi
else
  echo "No restic repo configured - Ignoring"
fi

## Docker
# Start the docker entrypoint
# https://github.com/docker-library/postgres/blob/d08757ccb56ee047efd76c41dbc148e2e2c4f68f/16/bookworm/docker-entrypoint.sh
# docker-entrypoint.sh of the postgres image is to bring the same behavior
# It performs a initdb
# https://www.postgresql.org/docs/current/creating-cluster.html
docker-entrypoint.sh "$@"
